import logging
from datetime import datetime, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import asyncio
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# üìå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = "8334051228:AAFcSyean64FwsDZ7zpzad920bboUbD8gIk"
SHEET_NAME = "Test Responses"
ADMIN_ID = 451971519  # –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

# üìå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_times = [time(7, 0), time(10, 0), time(17, 0)]

# üß† –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("creds.json", scope)
client = gspread.authorize(creds)
sheet = client.open(SHEET_NAME).sheet1

# üõ†Ô∏è –õ–æ–≥–≥–µ—Ä
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# üì§ –ö–Ω–æ–ø–∫–∏
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω–æ / Test completed", callback_data="completed")],
        [InlineKeyboardButton("‚è∞ –ü—Ä–æ–π–¥—É –ø—ñ–∑–Ω—ñ—à–µ / I‚Äôll do it later", callback_data="later")]
    ])

# üìù –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É
def log_to_sheet(user, event: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    row = [
        user.full_name,
        f"@{user.username}" if user.username else "‚Äî",
        str(user.id),
        user.language_code,
        event,
        timestamp,
    ]
    sheet.append_row(row, value_input_option="RAW")

# üü¢ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_states[user.id] = {"status": "waiting"}

    await update.message.reply_text(
        "‚ùóÔ∏è–ü—Ä–∏–≤—ñ—Ç! –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ –∫—ñ–Ω—Ü—è –º—ñ—Å—è—Ü—è: https://forms.office.com/e/76GbS3T71W\n"
        "‚ùóÔ∏èHi! Don‚Äôt forget to complete the test by the end of the month: https://forms.office.com/e/76GbS3T71W",
        reply_markup=get_keyboard()
    )

    log_to_sheet(user, "üöÄ /start")

# üîò –ö–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "completed":
        user_states[user_id]["status"] = "completed"
        await query.edit_message_text("‚úÖ –î—è–∫—É—î–º–æ! / Thank you for completing the test.")
        log_to_sheet(query.from_user, "‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ")
    elif query.data == "later":
        user_states[user_id]["status"] = "later"
        await query.edit_message_text("‚è∞ –î–æ–±—Ä–µ, –Ω–∞–≥–∞–¥–∞—î–º–æ –ø—ñ–∑–Ω—ñ—à–µ. / Got it, we‚Äôll remind you later.")
        log_to_sheet(query.from_user, "‚è∞ –ü–æ–∑–∂–µ")

# ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def reminder_loop(app):
    while True:
        now = datetime.now().time()
        if any(now.hour == rt.hour and now.minute == rt.minute for rt in reminder_times):
            for user_id, state in user_states.items():
                if state["status"] in ["waiting", "later"]:
                    try:
                        await app.bot.send_message(
                            chat_id=user_id,
                            text="‚ùóÔ∏è–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –Ω–µ –∑–∞–±—É–¥—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç / Reminder: please complete the test\nhttps://forms.office.com/e/76GbS3T71W",
                            reply_markup=get_keyboard()
                        )
                    except Exception as e:
                        logging.warning(f"Couldn't send reminder to {user_id}: {e}")
            await asyncio.sleep(60)
        await asyncio.sleep(10)

# üöÄ –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    asyncio.create_task(reminder_loop(app))
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
